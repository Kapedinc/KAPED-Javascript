/*
 * KAPED PARTNER API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ApplicationStatusUpdate} from '../model/ApplicationStatusUpdate';
import {EditApplication} from '../model/EditApplication';
import {Login} from '../model/Login';
import {ResumeApplication} from '../model/ResumeApplication';
import {SubmitApplication} from '../model/SubmitApplication';
import {ViewCardDetail} from '../model/ViewCardDetail';

/**
* RESTCalls service.
* @module api/RESTCallsApi
* @version 1.0.1
*/
export class RESTCallsApi {

    /**
    * Constructs a new RESTCallsApi. 
    * @alias module:api/RESTCallsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the activeCardGet operation.
     * @callback moduleapi/RESTCallsApi~activeCardGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * active-card
     * @param {String} apiKey 
     * @param {module:api/RESTCallsApi~activeCardGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activeCardGet(apiKey, callback) {
      
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling activeCardGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/active-card', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the applicationStatusUpdate operation.
     * @callback moduleapi/RESTCallsApi~applicationStatusUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Application Status Update
     * @param {module:model/ApplicationStatusUpdate} body 
     * @param {String} apiKey 
     * @param {module:api/RESTCallsApi~applicationStatusUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    applicationStatusUpdate(body, apiKey, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling applicationStatusUpdate");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling applicationStatusUpdate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/application-status-update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the checkStatusGet operation.
     * @callback moduleapi/RESTCallsApi~checkStatusGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * check-status
     * @param {String} apiKey 
     * @param {String} applicationID 
     * @param {module:api/RESTCallsApi~checkStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    checkStatusGet(apiKey, applicationID, callback) {
      
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling checkStatusGet");
      }
      // verify the required parameter 'applicationID' is set
      if (applicationID === undefined || applicationID === null) {
        throw new Error("Missing the required parameter 'applicationID' when calling checkStatusGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'applicationID': applicationID
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/check-status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the editApplication operation.
     * @callback moduleapi/RESTCallsApi~editApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit Application
     * @param {module:model/EditApplication} body 
     * @param {String} apiKey 
     * @param {module:api/RESTCallsApi~editApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    editApplication(body, apiKey, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling editApplication");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling editApplication");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/edit-application', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listApplicationGet operation.
     * @callback moduleapi/RESTCallsApi~listApplicationGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list-application
     * @param {String} apiKey 
     * @param {String} type 
     * @param {module:api/RESTCallsApi~listApplicationGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listApplicationGet(apiKey, type, callback) {
      
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling listApplicationGet");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling listApplicationGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'type': type
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/list-application', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the loginTokenPost operation.
     * @callback moduleapi/RESTCallsApi~loginTokenPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * @param {module:model/Login} body 
     * @param {String} apiKey 
     * @param {module:api/RESTCallsApi~loginTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loginTokenPost(body, apiKey, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling loginTokenPost");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling loginTokenPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/login-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the resumeApplication operation.
     * @callback moduleapi/RESTCallsApi~resumeApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume Application
     * @param {module:model/ResumeApplication} body 
     * @param {String} apiKey 
     * @param {module:api/RESTCallsApi~resumeApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resumeApplication(body, apiKey, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling resumeApplication");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling resumeApplication");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/resume-application', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the singleApplicationGet operation.
     * @callback moduleapi/RESTCallsApi~singleApplicationGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * single-application
     * @param {String} apiKey 
     * @param {String} applicationID 
     * @param {module:api/RESTCallsApi~singleApplicationGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    singleApplicationGet(apiKey, applicationID, callback) {
      
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling singleApplicationGet");
      }
      // verify the required parameter 'applicationID' is set
      if (applicationID === undefined || applicationID === null) {
        throw new Error("Missing the required parameter 'applicationID' when calling singleApplicationGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'applicationID': applicationID
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/single-application', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the singleCardGet operation.
     * @callback moduleapi/RESTCallsApi~singleCardGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * single-card
     * @param {String} apiKey 
     * @param {String} userUniqueId 
     * @param {String} month 
     * @param {module:api/RESTCallsApi~singleCardGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    singleCardGet(apiKey, userUniqueId, month, callback) {
      
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling singleCardGet");
      }
      // verify the required parameter 'userUniqueId' is set
      if (userUniqueId === undefined || userUniqueId === null) {
        throw new Error("Missing the required parameter 'userUniqueId' when calling singleCardGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling singleCardGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'userUniqueId': userUniqueId,'month': month
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/single-card', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submitApplication operation.
     * @callback moduleapi/RESTCallsApi~submitApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmitApplication{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit Application
     * @param {module:model/SubmitApplication} body 
     * @param {String} apiKey 
     * @param {module:api/RESTCallsApi~submitApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    submitApplication(body, apiKey, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling submitApplication");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling submitApplication");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubmitApplication;

      return this.apiClient.callApi(
        '/submit-application', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the viewCardDetail operation.
     * @callback moduleapi/RESTCallsApi~viewCardDetailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View card Detail
     * @param {module:model/ViewCardDetail} body 
     * @param {String} apiKey 
     * @param {module:api/RESTCallsApi~viewCardDetailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    viewCardDetail(body, apiKey, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling viewCardDetail");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling viewCardDetail");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/view-card-detail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}