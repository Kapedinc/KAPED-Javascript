/*
 * KAPED PARTNER API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.37
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ApplicationStatusUpdate} from '../model/ApplicationStatusUpdate';
import {Business} from '../model/Business';
import {EditApplication} from '../model/EditApplication';
import {EditB2b2cApplication} from '../model/EditB2b2cApplication';
import {Gender} from '../model/Gender';
import {Login} from '../model/Login';
import {Ownership} from '../model/Ownership';
import {ResumeApplication} from '../model/ResumeApplication';
import {SIC} from '../model/SIC';
import {States} from '../model/States';
import {SubmitApplication} from '../model/SubmitApplication';
import {SubmitB2b2cApplication} from '../model/SubmitB2b2cApplication';
import {ViewCardDetail} from '../model/ViewCardDetail';

/**
* RESTCalls service.
* @module api/RESTCallsApi
* @version 1.2.0
*/
export class RESTCallsApi {

    /**
    * Constructs a new RESTCallsApi. 
    * @alias module:api/RESTCallsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the activeCardGet operation.
     * @callback moduleapi/RESTCallsApi~activeCardGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * active-card
     * @param {String} apiKey 
     * @param {module:api/RESTCallsApi~activeCardGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    activeCardGet(apiKey, callback) {
      
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling activeCardGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/active-card', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the applicationStatusUpdate operation.
     * @callback moduleapi/RESTCallsApi~applicationStatusUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Application Status Update
     * @param {module:model/ApplicationStatusUpdate} body 
     * @param {String} apiKey 
     * @param {module:api/RESTCallsApi~applicationStatusUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    applicationStatusUpdate(body, apiKey, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling applicationStatusUpdate");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling applicationStatusUpdate");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/application-status-update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the checkStatusGet operation.
     * @callback moduleapi/RESTCallsApi~checkStatusGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * check-status
     * @param {String} apiKey 
     * @param {String} applicationID 
     * @param {module:api/RESTCallsApi~checkStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    checkStatusGet(apiKey, applicationID, callback) {
      
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling checkStatusGet");
      }
      // verify the required parameter 'applicationID' is set
      if (applicationID === undefined || applicationID === null) {
        throw new Error("Missing the required parameter 'applicationID' when calling checkStatusGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'applicationID': applicationID
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/check-status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the editApplication operation.
     * @callback moduleapi/RESTCallsApi~editApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditApplication{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit Application
     * @param {String} applicationID 
     * @param {String} partnerBusinessName 
     * @param {String} partnerDateIncorporated 
     * @param {module:model/Business} partnerBusinessType 
     * @param {String} partnerBusinessAddress 
     * @param {String} partnerStreet2 
     * @param {String} partnerGeneralInformationCity 
     * @param {module:model/States} partnerGeneralInformationState 
     * @param {Number} partnerGeneralInformationZip 
     * @param {String} partnerWebsite 
     * @param {module:model/SIC} partnerSIC 
     * @param {module:model/Ownership} partnerOwnership 
     * @param {String} partnerBusinessDescription 
     * @param {Number} partnerBusinessFax 
     * @param {Number} partnerInitialCreditLimit 
     * @param {String} partnerCustomerInformationFirstName 
     * @param {String} partnerCustomerInformationLastName 
     * @param {String} partnerCustomerInformationHomeAddress 
     * @param {String} partnerCustomerInformationHomeStreet2 
     * @param {module:model/States} partnerCustomerInformationState 
     * @param {String} partnerCustomerInformationCity 
     * @param {Number} partnercustomerInformationZip 
     * @param {Number} partnerCustomerInformationPercentOwnership 
     * @param {String} partnerCustomerInformationDOB 
     * @param {Boolean} haveInsurance 
     * @param {module:model/Gender} gender 
     * @param {String} apiKey 
     * @param {module:api/RESTCallsApi~editApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    editApplication(applicationID, partnerBusinessName, partnerDateIncorporated, partnerBusinessType, partnerBusinessAddress, partnerStreet2, partnerGeneralInformationCity, partnerGeneralInformationState, partnerGeneralInformationZip, partnerWebsite, partnerSIC, partnerOwnership, partnerBusinessDescription, partnerBusinessFax, partnerInitialCreditLimit, partnerCustomerInformationFirstName, partnerCustomerInformationLastName, partnerCustomerInformationHomeAddress, partnerCustomerInformationHomeStreet2, partnerCustomerInformationState, partnerCustomerInformationCity, partnercustomerInformationZip, partnerCustomerInformationPercentOwnership, partnerCustomerInformationDOB, haveInsurance, gender, apiKey, callback) {
      
      let postBody = null;
      // verify the required parameter 'applicationID' is set
      if (applicationID === undefined || applicationID === null) {
        throw new Error("Missing the required parameter 'applicationID' when calling editApplication");
      }
      // verify the required parameter 'partnerBusinessName' is set
      if (partnerBusinessName === undefined || partnerBusinessName === null) {
        throw new Error("Missing the required parameter 'partnerBusinessName' when calling editApplication");
      }
      // verify the required parameter 'partnerDateIncorporated' is set
      if (partnerDateIncorporated === undefined || partnerDateIncorporated === null) {
        throw new Error("Missing the required parameter 'partnerDateIncorporated' when calling editApplication");
      }
      // verify the required parameter 'partnerBusinessType' is set
      if (partnerBusinessType === undefined || partnerBusinessType === null) {
        throw new Error("Missing the required parameter 'partnerBusinessType' when calling editApplication");
      }
      // verify the required parameter 'partnerBusinessAddress' is set
      if (partnerBusinessAddress === undefined || partnerBusinessAddress === null) {
        throw new Error("Missing the required parameter 'partnerBusinessAddress' when calling editApplication");
      }
      // verify the required parameter 'partnerStreet2' is set
      if (partnerStreet2 === undefined || partnerStreet2 === null) {
        throw new Error("Missing the required parameter 'partnerStreet2' when calling editApplication");
      }
      // verify the required parameter 'partnerGeneralInformationCity' is set
      if (partnerGeneralInformationCity === undefined || partnerGeneralInformationCity === null) {
        throw new Error("Missing the required parameter 'partnerGeneralInformationCity' when calling editApplication");
      }
      // verify the required parameter 'partnerGeneralInformationState' is set
      if (partnerGeneralInformationState === undefined || partnerGeneralInformationState === null) {
        throw new Error("Missing the required parameter 'partnerGeneralInformationState' when calling editApplication");
      }
      // verify the required parameter 'partnerGeneralInformationZip' is set
      if (partnerGeneralInformationZip === undefined || partnerGeneralInformationZip === null) {
        throw new Error("Missing the required parameter 'partnerGeneralInformationZip' when calling editApplication");
      }
      // verify the required parameter 'partnerWebsite' is set
      if (partnerWebsite === undefined || partnerWebsite === null) {
        throw new Error("Missing the required parameter 'partnerWebsite' when calling editApplication");
      }
      // verify the required parameter 'partnerSIC' is set
      if (partnerSIC === undefined || partnerSIC === null) {
        throw new Error("Missing the required parameter 'partnerSIC' when calling editApplication");
      }
      // verify the required parameter 'partnerOwnership' is set
      if (partnerOwnership === undefined || partnerOwnership === null) {
        throw new Error("Missing the required parameter 'partnerOwnership' when calling editApplication");
      }
      // verify the required parameter 'partnerBusinessDescription' is set
      if (partnerBusinessDescription === undefined || partnerBusinessDescription === null) {
        throw new Error("Missing the required parameter 'partnerBusinessDescription' when calling editApplication");
      }
      // verify the required parameter 'partnerBusinessFax' is set
      if (partnerBusinessFax === undefined || partnerBusinessFax === null) {
        throw new Error("Missing the required parameter 'partnerBusinessFax' when calling editApplication");
      }
      // verify the required parameter 'partnerInitialCreditLimit' is set
      if (partnerInitialCreditLimit === undefined || partnerInitialCreditLimit === null) {
        throw new Error("Missing the required parameter 'partnerInitialCreditLimit' when calling editApplication");
      }
      // verify the required parameter 'partnerCustomerInformationFirstName' is set
      if (partnerCustomerInformationFirstName === undefined || partnerCustomerInformationFirstName === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationFirstName' when calling editApplication");
      }
      // verify the required parameter 'partnerCustomerInformationLastName' is set
      if (partnerCustomerInformationLastName === undefined || partnerCustomerInformationLastName === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationLastName' when calling editApplication");
      }
      // verify the required parameter 'partnerCustomerInformationHomeAddress' is set
      if (partnerCustomerInformationHomeAddress === undefined || partnerCustomerInformationHomeAddress === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationHomeAddress' when calling editApplication");
      }
      // verify the required parameter 'partnerCustomerInformationHomeStreet2' is set
      if (partnerCustomerInformationHomeStreet2 === undefined || partnerCustomerInformationHomeStreet2 === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationHomeStreet2' when calling editApplication");
      }
      // verify the required parameter 'partnerCustomerInformationState' is set
      if (partnerCustomerInformationState === undefined || partnerCustomerInformationState === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationState' when calling editApplication");
      }
      // verify the required parameter 'partnerCustomerInformationCity' is set
      if (partnerCustomerInformationCity === undefined || partnerCustomerInformationCity === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationCity' when calling editApplication");
      }
      // verify the required parameter 'partnercustomerInformationZip' is set
      if (partnercustomerInformationZip === undefined || partnercustomerInformationZip === null) {
        throw new Error("Missing the required parameter 'partnercustomerInformationZip' when calling editApplication");
      }
      // verify the required parameter 'partnerCustomerInformationPercentOwnership' is set
      if (partnerCustomerInformationPercentOwnership === undefined || partnerCustomerInformationPercentOwnership === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationPercentOwnership' when calling editApplication");
      }
      // verify the required parameter 'partnerCustomerInformationDOB' is set
      if (partnerCustomerInformationDOB === undefined || partnerCustomerInformationDOB === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationDOB' when calling editApplication");
      }
      // verify the required parameter 'haveInsurance' is set
      if (haveInsurance === undefined || haveInsurance === null) {
        throw new Error("Missing the required parameter 'haveInsurance' when calling editApplication");
      }
      // verify the required parameter 'gender' is set
      if (gender === undefined || gender === null) {
        throw new Error("Missing the required parameter 'gender' when calling editApplication");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling editApplication");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        'applicationID': applicationID,'partnerBusinessName': partnerBusinessName,'partnerDateIncorporated': partnerDateIncorporated,'partnerBusinessType': partnerBusinessType,'partnerBusinessAddress': partnerBusinessAddress,'partnerStreet2': partnerStreet2,'partnerGeneralInformationCity': partnerGeneralInformationCity,'partnerGeneralInformationState': partnerGeneralInformationState,'partnerGeneralInformationZip': partnerGeneralInformationZip,'partnerWebsite': partnerWebsite,'partnerSIC': partnerSIC,'partnerOwnership': partnerOwnership,'partnerBusinessDescription': partnerBusinessDescription,'partnerBusinessFax': partnerBusinessFax,'partnerInitialCreditLimit': partnerInitialCreditLimit,'partnerCustomerInformationFirstName': partnerCustomerInformationFirstName,'partnerCustomerInformationLastName': partnerCustomerInformationLastName,'partnerCustomerInformationHomeAddress': partnerCustomerInformationHomeAddress,'partnerCustomerInformationHomeStreet2': partnerCustomerInformationHomeStreet2,'partnerCustomerInformationState': partnerCustomerInformationState,'partnerCustomerInformationCity': partnerCustomerInformationCity,'partnercustomerInformationZip': partnercustomerInformationZip,'partnerCustomerInformationPercentOwnership': partnerCustomerInformationPercentOwnership,'partnerCustomerInformationDOB': partnerCustomerInformationDOB,'haveInsurance': haveInsurance,'gender': gender
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EditApplication;

      return this.apiClient.callApi(
        '/edit-application', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the editB2B2CApplication operation.
     * @callback moduleapi/RESTCallsApi~editB2B2CApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditB2b2cApplication{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit Application
     * @param {String} applicationID 
     * @param {String} partnerBusinessName 
     * @param {String} partnerDateIncorporated 
     * @param {module:model/Business} partnerBusinessType 
     * @param {String} partnerBusinessAddress 
     * @param {String} partnerStreet2 
     * @param {String} partnerGeneralInformationCity 
     * @param {module:model/States} partnerGeneralInformationState 
     * @param {Number} partnerGeneralInformationZip 
     * @param {String} partnerWebsite 
     * @param {module:model/SIC} partnerSIC 
     * @param {module:model/Ownership} partnerOwnership 
     * @param {String} partnerBusinessDescription 
     * @param {Number} partnerBusinessFax 
     * @param {Number} partnerInitialCreditLimit 
     * @param {String} partnerCustomerInformationFirstName 
     * @param {String} partnerCustomerInformationLastName 
     * @param {String} partnerCustomerInformationHomeAddress 
     * @param {String} partnerCustomerInformationHomeStreet2 
     * @param {module:model/States} partnerCustomerInformationState 
     * @param {String} partnerCustomerInformationCity 
     * @param {Number} partnercustomerInformationZip 
     * @param {Number} partnerCustomerInformationPercentOwnership 
     * @param {String} partnerCustomerInformationDOB 
     * @param {Boolean} haveInsurance 
     * @param {module:model/Gender} gender 
     * @param {String} apiKey 
     * @param {module:api/RESTCallsApi~editB2B2CApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    editB2B2CApplication(applicationID, partnerBusinessName, partnerDateIncorporated, partnerBusinessType, partnerBusinessAddress, partnerStreet2, partnerGeneralInformationCity, partnerGeneralInformationState, partnerGeneralInformationZip, partnerWebsite, partnerSIC, partnerOwnership, partnerBusinessDescription, partnerBusinessFax, partnerInitialCreditLimit, partnerCustomerInformationFirstName, partnerCustomerInformationLastName, partnerCustomerInformationHomeAddress, partnerCustomerInformationHomeStreet2, partnerCustomerInformationState, partnerCustomerInformationCity, partnercustomerInformationZip, partnerCustomerInformationPercentOwnership, partnerCustomerInformationDOB, haveInsurance, gender, apiKey, callback) {
      
      let postBody = null;
      // verify the required parameter 'applicationID' is set
      if (applicationID === undefined || applicationID === null) {
        throw new Error("Missing the required parameter 'applicationID' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerBusinessName' is set
      if (partnerBusinessName === undefined || partnerBusinessName === null) {
        throw new Error("Missing the required parameter 'partnerBusinessName' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerDateIncorporated' is set
      if (partnerDateIncorporated === undefined || partnerDateIncorporated === null) {
        throw new Error("Missing the required parameter 'partnerDateIncorporated' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerBusinessType' is set
      if (partnerBusinessType === undefined || partnerBusinessType === null) {
        throw new Error("Missing the required parameter 'partnerBusinessType' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerBusinessAddress' is set
      if (partnerBusinessAddress === undefined || partnerBusinessAddress === null) {
        throw new Error("Missing the required parameter 'partnerBusinessAddress' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerStreet2' is set
      if (partnerStreet2 === undefined || partnerStreet2 === null) {
        throw new Error("Missing the required parameter 'partnerStreet2' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerGeneralInformationCity' is set
      if (partnerGeneralInformationCity === undefined || partnerGeneralInformationCity === null) {
        throw new Error("Missing the required parameter 'partnerGeneralInformationCity' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerGeneralInformationState' is set
      if (partnerGeneralInformationState === undefined || partnerGeneralInformationState === null) {
        throw new Error("Missing the required parameter 'partnerGeneralInformationState' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerGeneralInformationZip' is set
      if (partnerGeneralInformationZip === undefined || partnerGeneralInformationZip === null) {
        throw new Error("Missing the required parameter 'partnerGeneralInformationZip' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerWebsite' is set
      if (partnerWebsite === undefined || partnerWebsite === null) {
        throw new Error("Missing the required parameter 'partnerWebsite' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerSIC' is set
      if (partnerSIC === undefined || partnerSIC === null) {
        throw new Error("Missing the required parameter 'partnerSIC' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerOwnership' is set
      if (partnerOwnership === undefined || partnerOwnership === null) {
        throw new Error("Missing the required parameter 'partnerOwnership' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerBusinessDescription' is set
      if (partnerBusinessDescription === undefined || partnerBusinessDescription === null) {
        throw new Error("Missing the required parameter 'partnerBusinessDescription' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerBusinessFax' is set
      if (partnerBusinessFax === undefined || partnerBusinessFax === null) {
        throw new Error("Missing the required parameter 'partnerBusinessFax' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerInitialCreditLimit' is set
      if (partnerInitialCreditLimit === undefined || partnerInitialCreditLimit === null) {
        throw new Error("Missing the required parameter 'partnerInitialCreditLimit' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerCustomerInformationFirstName' is set
      if (partnerCustomerInformationFirstName === undefined || partnerCustomerInformationFirstName === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationFirstName' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerCustomerInformationLastName' is set
      if (partnerCustomerInformationLastName === undefined || partnerCustomerInformationLastName === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationLastName' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerCustomerInformationHomeAddress' is set
      if (partnerCustomerInformationHomeAddress === undefined || partnerCustomerInformationHomeAddress === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationHomeAddress' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerCustomerInformationHomeStreet2' is set
      if (partnerCustomerInformationHomeStreet2 === undefined || partnerCustomerInformationHomeStreet2 === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationHomeStreet2' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerCustomerInformationState' is set
      if (partnerCustomerInformationState === undefined || partnerCustomerInformationState === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationState' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerCustomerInformationCity' is set
      if (partnerCustomerInformationCity === undefined || partnerCustomerInformationCity === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationCity' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnercustomerInformationZip' is set
      if (partnercustomerInformationZip === undefined || partnercustomerInformationZip === null) {
        throw new Error("Missing the required parameter 'partnercustomerInformationZip' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerCustomerInformationPercentOwnership' is set
      if (partnerCustomerInformationPercentOwnership === undefined || partnerCustomerInformationPercentOwnership === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationPercentOwnership' when calling editB2B2CApplication");
      }
      // verify the required parameter 'partnerCustomerInformationDOB' is set
      if (partnerCustomerInformationDOB === undefined || partnerCustomerInformationDOB === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationDOB' when calling editB2B2CApplication");
      }
      // verify the required parameter 'haveInsurance' is set
      if (haveInsurance === undefined || haveInsurance === null) {
        throw new Error("Missing the required parameter 'haveInsurance' when calling editB2B2CApplication");
      }
      // verify the required parameter 'gender' is set
      if (gender === undefined || gender === null) {
        throw new Error("Missing the required parameter 'gender' when calling editB2B2CApplication");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling editB2B2CApplication");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        'applicationID': applicationID,'partnerBusinessName': partnerBusinessName,'partnerDateIncorporated': partnerDateIncorporated,'partnerBusinessType': partnerBusinessType,'partnerBusinessAddress': partnerBusinessAddress,'partnerStreet2': partnerStreet2,'partnerGeneralInformationCity': partnerGeneralInformationCity,'partnerGeneralInformationState': partnerGeneralInformationState,'partnerGeneralInformationZip': partnerGeneralInformationZip,'partnerWebsite': partnerWebsite,'partnerSIC': partnerSIC,'partnerOwnership': partnerOwnership,'partnerBusinessDescription': partnerBusinessDescription,'partnerBusinessFax': partnerBusinessFax,'partnerInitialCreditLimit': partnerInitialCreditLimit,'partnerCustomerInformationFirstName': partnerCustomerInformationFirstName,'partnerCustomerInformationLastName': partnerCustomerInformationLastName,'partnerCustomerInformationHomeAddress': partnerCustomerInformationHomeAddress,'partnerCustomerInformationHomeStreet2': partnerCustomerInformationHomeStreet2,'partnerCustomerInformationState': partnerCustomerInformationState,'partnerCustomerInformationCity': partnerCustomerInformationCity,'partnercustomerInformationZip': partnercustomerInformationZip,'partnerCustomerInformationPercentOwnership': partnerCustomerInformationPercentOwnership,'partnerCustomerInformationDOB': partnerCustomerInformationDOB,'haveInsurance': haveInsurance,'gender': gender
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = EditB2b2cApplication;

      return this.apiClient.callApi(
        '/edit-b2b2c-application', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listApplicationGet operation.
     * @callback moduleapi/RESTCallsApi~listApplicationGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * list-application
     * @param {String} apiKey 
     * @param {String} type 
     * @param {module:api/RESTCallsApi~listApplicationGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listApplicationGet(apiKey, type, callback) {
      
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling listApplicationGet");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling listApplicationGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'type': type
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/list-application', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the loginTokenPost operation.
     * @callback moduleapi/RESTCallsApi~loginTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Login{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login
     * @param {String} username 
     * @param {String} apiKey 
     * @param {module:api/RESTCallsApi~loginTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    loginTokenPost(username, apiKey, callback) {
      
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling loginTokenPost");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling loginTokenPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        'username': username
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Login;

      return this.apiClient.callApi(
        '/login-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the resumeApplication operation.
     * @callback moduleapi/RESTCallsApi~resumeApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume Application
     * @param {module:model/ResumeApplication} body 
     * @param {String} apiKey 
     * @param {module:api/RESTCallsApi~resumeApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resumeApplication(body, apiKey, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling resumeApplication");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling resumeApplication");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/resume-application', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the singleApplicationGet operation.
     * @callback moduleapi/RESTCallsApi~singleApplicationGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * single-application
     * @param {String} apiKey 
     * @param {String} applicationID 
     * @param {module:api/RESTCallsApi~singleApplicationGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    singleApplicationGet(apiKey, applicationID, callback) {
      
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling singleApplicationGet");
      }
      // verify the required parameter 'applicationID' is set
      if (applicationID === undefined || applicationID === null) {
        throw new Error("Missing the required parameter 'applicationID' when calling singleApplicationGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'applicationID': applicationID
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/single-application', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the singleCardGet operation.
     * @callback moduleapi/RESTCallsApi~singleCardGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * single-card
     * @param {String} apiKey 
     * @param {String} userUniqueId 
     * @param {String} month 
     * @param {module:api/RESTCallsApi~singleCardGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    singleCardGet(apiKey, userUniqueId, month, callback) {
      
      let postBody = null;
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling singleCardGet");
      }
      // verify the required parameter 'userUniqueId' is set
      if (userUniqueId === undefined || userUniqueId === null) {
        throw new Error("Missing the required parameter 'userUniqueId' when calling singleCardGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling singleCardGet");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'userUniqueId': userUniqueId,'month': month
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/single-card', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submitApplication operation.
     * @callback moduleapi/RESTCallsApi~submitApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmitApplication{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit Application
     * @param {String} applicationType 
     * @param {String} partnerBusinessName 
     * @param {Number} partnerTaxID 
     * @param {String} partnerDateIncorporated 
     * @param {module:model/Business} partnerBusinessType 
     * @param {String} partnerBusinessAddress 
     * @param {String} partnerStreet2 
     * @param {String} partnerGeneralInformationCity 
     * @param {module:model/States} partnerGeneralInformationState 
     * @param {Number} partnerGeneralInformationZip 
     * @param {String} partnerWebsite 
     * @param {module:model/SIC} partnerSIC 
     * @param {module:model/Ownership} partnerOwnership 
     * @param {String} partnerBusinessDescription 
     * @param {Number} partnerBusinessPhone 
     * @param {String} partnerCustomerSupportEmail 
     * @param {Number} partnerBusinessFax 
     * @param {Number} partnerInitialCreditLimit 
     * @param {String} partnerCustomerInformationFirstName 
     * @param {String} partnerCustomerInformationLastName 
     * @param {String} partnerCustomerInformationHomeAddress 
     * @param {String} partnerCustomerInformationHomeStreet2 
     * @param {module:model/States} partnerCustomerInformationState 
     * @param {String} partnerCustomerInformationCity 
     * @param {Number} partnercustomerInformationZip 
     * @param {Number} partnerCustomerInformationPercentOwnership 
     * @param {String} partnerCustomerInformationDrivingLicenseNumber 
     * @param {String} partnerCustomerInformationLicenseDate 
     * @param {String} partnerCustomerInformationDOB 
     * @param {String} partnerCustomerInformationSSN 
     * @param {Boolean} partnerTermsConditions 
     * @param {Boolean} haveInsurance 
     * @param {module:model/Gender} gender 
     * @param {Array.<Blob>} EIN 
     * @param {Array.<Blob>} articles 
     * @param {Array.<Blob>} sSNCard 
     * @param {Array.<Blob>} dLFront 
     * @param {Array.<Blob>} dLBack 
     * @param {String} apiKey 
     * @param {module:api/RESTCallsApi~submitApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    submitApplication(applicationType, partnerBusinessName, partnerTaxID, partnerDateIncorporated, partnerBusinessType, partnerBusinessAddress, partnerStreet2, partnerGeneralInformationCity, partnerGeneralInformationState, partnerGeneralInformationZip, partnerWebsite, partnerSIC, partnerOwnership, partnerBusinessDescription, partnerBusinessPhone, partnerCustomerSupportEmail, partnerBusinessFax, partnerInitialCreditLimit, partnerCustomerInformationFirstName, partnerCustomerInformationLastName, partnerCustomerInformationHomeAddress, partnerCustomerInformationHomeStreet2, partnerCustomerInformationState, partnerCustomerInformationCity, partnercustomerInformationZip, partnerCustomerInformationPercentOwnership, partnerCustomerInformationDrivingLicenseNumber, partnerCustomerInformationLicenseDate, partnerCustomerInformationDOB, partnerCustomerInformationSSN, partnerTermsConditions, haveInsurance, gender, EIN, articles, sSNCard, dLFront, dLBack, apiKey, callback) {
      
      let postBody = null;
      // verify the required parameter 'applicationType' is set
      if (applicationType === undefined || applicationType === null) {
        throw new Error("Missing the required parameter 'applicationType' when calling submitApplication");
      }
      // verify the required parameter 'partnerBusinessName' is set
      if (partnerBusinessName === undefined || partnerBusinessName === null) {
        throw new Error("Missing the required parameter 'partnerBusinessName' when calling submitApplication");
      }
      // verify the required parameter 'partnerTaxID' is set
      if (partnerTaxID === undefined || partnerTaxID === null) {
        throw new Error("Missing the required parameter 'partnerTaxID' when calling submitApplication");
      }
      // verify the required parameter 'partnerDateIncorporated' is set
      if (partnerDateIncorporated === undefined || partnerDateIncorporated === null) {
        throw new Error("Missing the required parameter 'partnerDateIncorporated' when calling submitApplication");
      }
      // verify the required parameter 'partnerBusinessType' is set
      if (partnerBusinessType === undefined || partnerBusinessType === null) {
        throw new Error("Missing the required parameter 'partnerBusinessType' when calling submitApplication");
      }
      // verify the required parameter 'partnerBusinessAddress' is set
      if (partnerBusinessAddress === undefined || partnerBusinessAddress === null) {
        throw new Error("Missing the required parameter 'partnerBusinessAddress' when calling submitApplication");
      }
      // verify the required parameter 'partnerStreet2' is set
      if (partnerStreet2 === undefined || partnerStreet2 === null) {
        throw new Error("Missing the required parameter 'partnerStreet2' when calling submitApplication");
      }
      // verify the required parameter 'partnerGeneralInformationCity' is set
      if (partnerGeneralInformationCity === undefined || partnerGeneralInformationCity === null) {
        throw new Error("Missing the required parameter 'partnerGeneralInformationCity' when calling submitApplication");
      }
      // verify the required parameter 'partnerGeneralInformationState' is set
      if (partnerGeneralInformationState === undefined || partnerGeneralInformationState === null) {
        throw new Error("Missing the required parameter 'partnerGeneralInformationState' when calling submitApplication");
      }
      // verify the required parameter 'partnerGeneralInformationZip' is set
      if (partnerGeneralInformationZip === undefined || partnerGeneralInformationZip === null) {
        throw new Error("Missing the required parameter 'partnerGeneralInformationZip' when calling submitApplication");
      }
      // verify the required parameter 'partnerWebsite' is set
      if (partnerWebsite === undefined || partnerWebsite === null) {
        throw new Error("Missing the required parameter 'partnerWebsite' when calling submitApplication");
      }
      // verify the required parameter 'partnerSIC' is set
      if (partnerSIC === undefined || partnerSIC === null) {
        throw new Error("Missing the required parameter 'partnerSIC' when calling submitApplication");
      }
      // verify the required parameter 'partnerOwnership' is set
      if (partnerOwnership === undefined || partnerOwnership === null) {
        throw new Error("Missing the required parameter 'partnerOwnership' when calling submitApplication");
      }
      // verify the required parameter 'partnerBusinessDescription' is set
      if (partnerBusinessDescription === undefined || partnerBusinessDescription === null) {
        throw new Error("Missing the required parameter 'partnerBusinessDescription' when calling submitApplication");
      }
      // verify the required parameter 'partnerBusinessPhone' is set
      if (partnerBusinessPhone === undefined || partnerBusinessPhone === null) {
        throw new Error("Missing the required parameter 'partnerBusinessPhone' when calling submitApplication");
      }
      // verify the required parameter 'partnerCustomerSupportEmail' is set
      if (partnerCustomerSupportEmail === undefined || partnerCustomerSupportEmail === null) {
        throw new Error("Missing the required parameter 'partnerCustomerSupportEmail' when calling submitApplication");
      }
      // verify the required parameter 'partnerBusinessFax' is set
      if (partnerBusinessFax === undefined || partnerBusinessFax === null) {
        throw new Error("Missing the required parameter 'partnerBusinessFax' when calling submitApplication");
      }
      // verify the required parameter 'partnerInitialCreditLimit' is set
      if (partnerInitialCreditLimit === undefined || partnerInitialCreditLimit === null) {
        throw new Error("Missing the required parameter 'partnerInitialCreditLimit' when calling submitApplication");
      }
      // verify the required parameter 'partnerCustomerInformationFirstName' is set
      if (partnerCustomerInformationFirstName === undefined || partnerCustomerInformationFirstName === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationFirstName' when calling submitApplication");
      }
      // verify the required parameter 'partnerCustomerInformationLastName' is set
      if (partnerCustomerInformationLastName === undefined || partnerCustomerInformationLastName === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationLastName' when calling submitApplication");
      }
      // verify the required parameter 'partnerCustomerInformationHomeAddress' is set
      if (partnerCustomerInformationHomeAddress === undefined || partnerCustomerInformationHomeAddress === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationHomeAddress' when calling submitApplication");
      }
      // verify the required parameter 'partnerCustomerInformationHomeStreet2' is set
      if (partnerCustomerInformationHomeStreet2 === undefined || partnerCustomerInformationHomeStreet2 === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationHomeStreet2' when calling submitApplication");
      }
      // verify the required parameter 'partnerCustomerInformationState' is set
      if (partnerCustomerInformationState === undefined || partnerCustomerInformationState === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationState' when calling submitApplication");
      }
      // verify the required parameter 'partnerCustomerInformationCity' is set
      if (partnerCustomerInformationCity === undefined || partnerCustomerInformationCity === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationCity' when calling submitApplication");
      }
      // verify the required parameter 'partnercustomerInformationZip' is set
      if (partnercustomerInformationZip === undefined || partnercustomerInformationZip === null) {
        throw new Error("Missing the required parameter 'partnercustomerInformationZip' when calling submitApplication");
      }
      // verify the required parameter 'partnerCustomerInformationPercentOwnership' is set
      if (partnerCustomerInformationPercentOwnership === undefined || partnerCustomerInformationPercentOwnership === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationPercentOwnership' when calling submitApplication");
      }
      // verify the required parameter 'partnerCustomerInformationDrivingLicenseNumber' is set
      if (partnerCustomerInformationDrivingLicenseNumber === undefined || partnerCustomerInformationDrivingLicenseNumber === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationDrivingLicenseNumber' when calling submitApplication");
      }
      // verify the required parameter 'partnerCustomerInformationLicenseDate' is set
      if (partnerCustomerInformationLicenseDate === undefined || partnerCustomerInformationLicenseDate === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationLicenseDate' when calling submitApplication");
      }
      // verify the required parameter 'partnerCustomerInformationDOB' is set
      if (partnerCustomerInformationDOB === undefined || partnerCustomerInformationDOB === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationDOB' when calling submitApplication");
      }
      // verify the required parameter 'partnerCustomerInformationSSN' is set
      if (partnerCustomerInformationSSN === undefined || partnerCustomerInformationSSN === null) {
        throw new Error("Missing the required parameter 'partnerCustomerInformationSSN' when calling submitApplication");
      }
      // verify the required parameter 'partnerTermsConditions' is set
      if (partnerTermsConditions === undefined || partnerTermsConditions === null) {
        throw new Error("Missing the required parameter 'partnerTermsConditions' when calling submitApplication");
      }
      // verify the required parameter 'haveInsurance' is set
      if (haveInsurance === undefined || haveInsurance === null) {
        throw new Error("Missing the required parameter 'haveInsurance' when calling submitApplication");
      }
      // verify the required parameter 'gender' is set
      if (gender === undefined || gender === null) {
        throw new Error("Missing the required parameter 'gender' when calling submitApplication");
      }
      // verify the required parameter 'EIN' is set
      if (EIN === undefined || EIN === null) {
        throw new Error("Missing the required parameter 'EIN' when calling submitApplication");
      }
      // verify the required parameter 'articles' is set
      if (articles === undefined || articles === null) {
        throw new Error("Missing the required parameter 'articles' when calling submitApplication");
      }
      // verify the required parameter 'sSNCard' is set
      if (sSNCard === undefined || sSNCard === null) {
        throw new Error("Missing the required parameter 'sSNCard' when calling submitApplication");
      }
      // verify the required parameter 'dLFront' is set
      if (dLFront === undefined || dLFront === null) {
        throw new Error("Missing the required parameter 'dLFront' when calling submitApplication");
      }
      // verify the required parameter 'dLBack' is set
      if (dLBack === undefined || dLBack === null) {
        throw new Error("Missing the required parameter 'dLBack' when calling submitApplication");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling submitApplication");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        'applicationType': applicationType,'partnerBusinessName': partnerBusinessName,'partnerTaxID': partnerTaxID,'partnerDateIncorporated': partnerDateIncorporated,'partnerBusinessType': partnerBusinessType,'partnerBusinessAddress': partnerBusinessAddress,'partnerStreet2': partnerStreet2,'partnerGeneralInformationCity': partnerGeneralInformationCity,'partnerGeneralInformationState': partnerGeneralInformationState,'partnerGeneralInformationZip': partnerGeneralInformationZip,'partnerWebsite': partnerWebsite,'partnerSIC': partnerSIC,'partnerOwnership': partnerOwnership,'partnerBusinessDescription': partnerBusinessDescription,'partnerBusinessPhone': partnerBusinessPhone,'partnerCustomerSupportEmail': partnerCustomerSupportEmail,'partnerBusinessFax': partnerBusinessFax,'partnerInitialCreditLimit': partnerInitialCreditLimit,'partnerCustomerInformationFirstName': partnerCustomerInformationFirstName,'partnerCustomerInformationLastName': partnerCustomerInformationLastName,'partnerCustomerInformationHomeAddress': partnerCustomerInformationHomeAddress,'partnerCustomerInformationHomeStreet2': partnerCustomerInformationHomeStreet2,'partnerCustomerInformationState': partnerCustomerInformationState,'partnerCustomerInformationCity': partnerCustomerInformationCity,'partnercustomerInformationZip': partnercustomerInformationZip,'partnerCustomerInformationPercentOwnership': partnerCustomerInformationPercentOwnership,'partnerCustomerInformationDrivingLicenseNumber': partnerCustomerInformationDrivingLicenseNumber,'partnerCustomerInformationLicenseDate': partnerCustomerInformationLicenseDate,'partnerCustomerInformationDOB': partnerCustomerInformationDOB,'partnerCustomerInformationSSN': partnerCustomerInformationSSN,'partnerTermsConditions': partnerTermsConditions,'haveInsurance': haveInsurance,'gender': gender,'EIN': this.apiClient.buildCollectionParam(EIN, 'multi'),'Articles': this.apiClient.buildCollectionParam(articles, 'multi'),'SSNCard': this.apiClient.buildCollectionParam(sSNCard, 'multi'),'DL_Front': this.apiClient.buildCollectionParam(dLFront, 'multi'),'DL_Back': this.apiClient.buildCollectionParam(dLBack, 'multi')
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = SubmitApplication;

      return this.apiClient.callApi(
        '/submit-application', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the submitApplicationB2B2C operation.
     * @callback moduleapi/RESTCallsApi~submitApplicationB2B2CCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmitB2b2cApplication{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit Application B2B2C
     * @param {module:model/String} applicationType 
     * @param {String} customerCurrentCity 
     * @param {String} customerCurrentStreetAddress 
     * @param {String} customerFirstName 
     * @param {String} customerMiddleName 
     * @param {String} customerLastName 
     * @param {String} customerMaidenName 
     * @param {String} customerDateOfBirth 
     * @param {Number} customerSSN 
     * @param {module:model/Gender} customerGender 
     * @param {String} customerEmail 
     * @param {Number} customerDrivingLicenseNumber 
     * @param {module:model/States} customerCurrentState 
     * @param {Number} customerCurrentZip 
     * @param {Number} customerCurrentYears 
     * @param {Number} customerPersonalPhone 
     * @param {module:model/String} customerHomeType 
     * @param {String} customerEmployerName 
     * @param {String} customerPosition 
     * @param {Number} customerBusinessPhone 
     * @param {Number} customerYearsInJob 
     * @param {Number} customerMonthlyIncome 
     * @param {Number} customerOtherIncome 
     * @param {String} customerSourceOtherIncome 
     * @param {Boolean} customerHaveInsurance 
     * @param {Boolean} customerTermsConditions 
     * @param {Number} initialCreditLimit 
     * @param {Array.<Blob>} dLFront 
     * @param {Array.<Blob>} dLBack 
     * @param {String} apiKey 
     * @param {module:api/RESTCallsApi~submitApplicationB2B2CCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    submitApplicationB2B2C(applicationType, customerCurrentCity, customerCurrentStreetAddress, customerFirstName, customerMiddleName, customerLastName, customerMaidenName, customerDateOfBirth, customerSSN, customerGender, customerEmail, customerDrivingLicenseNumber, customerCurrentState, customerCurrentZip, customerCurrentYears, customerPersonalPhone, customerHomeType, customerEmployerName, customerPosition, customerBusinessPhone, customerYearsInJob, customerMonthlyIncome, customerOtherIncome, customerSourceOtherIncome, customerHaveInsurance, customerTermsConditions, initialCreditLimit, dLFront, dLBack, apiKey, callback) {
      
      let postBody = null;
      // verify the required parameter 'applicationType' is set
      if (applicationType === undefined || applicationType === null) {
        throw new Error("Missing the required parameter 'applicationType' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerCurrentCity' is set
      if (customerCurrentCity === undefined || customerCurrentCity === null) {
        throw new Error("Missing the required parameter 'customerCurrentCity' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerCurrentStreetAddress' is set
      if (customerCurrentStreetAddress === undefined || customerCurrentStreetAddress === null) {
        throw new Error("Missing the required parameter 'customerCurrentStreetAddress' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerFirstName' is set
      if (customerFirstName === undefined || customerFirstName === null) {
        throw new Error("Missing the required parameter 'customerFirstName' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerMiddleName' is set
      if (customerMiddleName === undefined || customerMiddleName === null) {
        throw new Error("Missing the required parameter 'customerMiddleName' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerLastName' is set
      if (customerLastName === undefined || customerLastName === null) {
        throw new Error("Missing the required parameter 'customerLastName' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerMaidenName' is set
      if (customerMaidenName === undefined || customerMaidenName === null) {
        throw new Error("Missing the required parameter 'customerMaidenName' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerDateOfBirth' is set
      if (customerDateOfBirth === undefined || customerDateOfBirth === null) {
        throw new Error("Missing the required parameter 'customerDateOfBirth' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerSSN' is set
      if (customerSSN === undefined || customerSSN === null) {
        throw new Error("Missing the required parameter 'customerSSN' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerGender' is set
      if (customerGender === undefined || customerGender === null) {
        throw new Error("Missing the required parameter 'customerGender' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerEmail' is set
      if (customerEmail === undefined || customerEmail === null) {
        throw new Error("Missing the required parameter 'customerEmail' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerDrivingLicenseNumber' is set
      if (customerDrivingLicenseNumber === undefined || customerDrivingLicenseNumber === null) {
        throw new Error("Missing the required parameter 'customerDrivingLicenseNumber' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerCurrentState' is set
      if (customerCurrentState === undefined || customerCurrentState === null) {
        throw new Error("Missing the required parameter 'customerCurrentState' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerCurrentZip' is set
      if (customerCurrentZip === undefined || customerCurrentZip === null) {
        throw new Error("Missing the required parameter 'customerCurrentZip' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerCurrentYears' is set
      if (customerCurrentYears === undefined || customerCurrentYears === null) {
        throw new Error("Missing the required parameter 'customerCurrentYears' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerPersonalPhone' is set
      if (customerPersonalPhone === undefined || customerPersonalPhone === null) {
        throw new Error("Missing the required parameter 'customerPersonalPhone' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerHomeType' is set
      if (customerHomeType === undefined || customerHomeType === null) {
        throw new Error("Missing the required parameter 'customerHomeType' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerEmployerName' is set
      if (customerEmployerName === undefined || customerEmployerName === null) {
        throw new Error("Missing the required parameter 'customerEmployerName' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerPosition' is set
      if (customerPosition === undefined || customerPosition === null) {
        throw new Error("Missing the required parameter 'customerPosition' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerBusinessPhone' is set
      if (customerBusinessPhone === undefined || customerBusinessPhone === null) {
        throw new Error("Missing the required parameter 'customerBusinessPhone' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerYearsInJob' is set
      if (customerYearsInJob === undefined || customerYearsInJob === null) {
        throw new Error("Missing the required parameter 'customerYearsInJob' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerMonthlyIncome' is set
      if (customerMonthlyIncome === undefined || customerMonthlyIncome === null) {
        throw new Error("Missing the required parameter 'customerMonthlyIncome' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerOtherIncome' is set
      if (customerOtherIncome === undefined || customerOtherIncome === null) {
        throw new Error("Missing the required parameter 'customerOtherIncome' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerSourceOtherIncome' is set
      if (customerSourceOtherIncome === undefined || customerSourceOtherIncome === null) {
        throw new Error("Missing the required parameter 'customerSourceOtherIncome' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerHaveInsurance' is set
      if (customerHaveInsurance === undefined || customerHaveInsurance === null) {
        throw new Error("Missing the required parameter 'customerHaveInsurance' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'customerTermsConditions' is set
      if (customerTermsConditions === undefined || customerTermsConditions === null) {
        throw new Error("Missing the required parameter 'customerTermsConditions' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'initialCreditLimit' is set
      if (initialCreditLimit === undefined || initialCreditLimit === null) {
        throw new Error("Missing the required parameter 'initialCreditLimit' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'dLFront' is set
      if (dLFront === undefined || dLFront === null) {
        throw new Error("Missing the required parameter 'dLFront' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'dLBack' is set
      if (dLBack === undefined || dLBack === null) {
        throw new Error("Missing the required parameter 'dLBack' when calling submitApplicationB2B2C");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling submitApplicationB2B2C");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        'applicationType': applicationType,'customerCurrentCity': customerCurrentCity,'customerCurrentStreetAddress': customerCurrentStreetAddress,'customerFirstName': customerFirstName,'customerMiddleName': customerMiddleName,'customerLastName': customerLastName,'customerMaidenName': customerMaidenName,'customerDateOfBirth': customerDateOfBirth,'customerSSN': customerSSN,'customerGender': customerGender,'customerEmail': customerEmail,'customerDrivingLicenseNumber': customerDrivingLicenseNumber,'customerCurrentState': customerCurrentState,'customerCurrentZip': customerCurrentZip,'customerCurrentYears': customerCurrentYears,'customerPersonalPhone': customerPersonalPhone,'customerHomeType': customerHomeType,'customerEmployerName': customerEmployerName,'customerPosition': customerPosition,'customerBusinessPhone': customerBusinessPhone,'customerYearsInJob': customerYearsInJob,'customerMonthlyIncome': customerMonthlyIncome,'customerOtherIncome': customerOtherIncome,'customerSourceOtherIncome': customerSourceOtherIncome,'customerHaveInsurance': customerHaveInsurance,'customerTermsConditions': customerTermsConditions,'initialCreditLimit': initialCreditLimit,'DL_Front': this.apiClient.buildCollectionParam(dLFront, 'multi'),'DL_Back': this.apiClient.buildCollectionParam(dLBack, 'multi')
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = SubmitB2b2cApplication;

      return this.apiClient.callApi(
        '/submit-b2b2c-application', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the viewCardDetail operation.
     * @callback moduleapi/RESTCallsApi~viewCardDetailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View card Detail
     * @param {module:model/ViewCardDetail} body 
     * @param {String} apiKey 
     * @param {module:api/RESTCallsApi~viewCardDetailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    viewCardDetail(body, apiKey, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling viewCardDetail");
      }
      // verify the required parameter 'apiKey' is set
      if (apiKey === undefined || apiKey === null) {
        throw new Error("Missing the required parameter 'apiKey' when calling viewCardDetail");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'ApiKey': apiKey
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/view-card-detail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}